import { Injectable } from '@angular/core';
import {HttpClient} from '@angular/common/http';

import { UserHouseContractPic } from '../models/UserHouseContractPic';

@Injectable()
export class UserHouseContractPicService {
	
	constructor(private http: HttpClient) { }
	
	private basePath:string = '/api/1/user_house_contracts/{contract_id}/pics';
	
	list(contractId:any) {
		let path = this.basePath.replace('{contract_id}', contractId);
		return this.http.get(path);
	}

	/**
	 * Add house pic to the house
	 * {
  			"house_id":1,
  			"about_pic": "Front facing garden",
  			"primary_pic":true,
  			"picture":{
    			"data":"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",
    			"filename":"rose.jpg",
    			"content_type":"image/jpg"
   			},
   			"created_by": 1
		}
	 */
	add(contractId:any, userHouseContractPic:UserHouseContractPic) {
		let path = this.basePath.replace('{contract_id}', contractId);
		return this.http.post(path, userHouseContractPic);
	}
	
	/**
	 * Remove house pic (house pic id)
	 */
	remove(contractId:any, picId:any) {
		let path = this.basePath.replace('{contract_id}', contractId);
		return this.http.delete(path + "/" + picId, {});
	}
}
